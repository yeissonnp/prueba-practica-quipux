/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.quipuxpunto2interface;

/**
 *
 * @author user
 */
public class FrmPunto2 extends javax.swing.JFrame {

    /**
     * Creates new form FrmPunto2
     */
    public FrmPunto2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblResultado = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        txtMinuto = new javax.swing.JTextField();
        btnGenerar1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblEntrada = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 200));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Ingrse las Horas (entre 1-12):");

        lblResultado.setBackground(new java.awt.Color(255, 255, 255));
        lblResultado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblResultado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        txtHora.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoraActionPerformed(evt);
            }
        });

        txtMinuto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMinuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinutoActionPerformed(evt);
            }
        });

        btnGenerar1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGenerar1.setText("Generar");
        btnGenerar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerar1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Ingrse los minutos (entre 0-59):");

        lblEntrada.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEntrada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Hora en letras");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerar1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinuto, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMinuto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(btnGenerar1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraActionPerformed

    private void txtMinutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinutoActionPerformed

    private void btnGenerar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerar1ActionPerformed
        // declaración de variables
        int h = 0;
        int m = -1;
        
        // lectura y validación de tipo de dato entero para la variable h: hora
        try {
            h = Integer.parseInt(txtHora.getText());
        }
        catch (NumberFormatException e){
            lblEntrada.setText("¡¡ entrada no valida, repitela de nuevo !!");
        }
        
        
        // lectura y validación de tipo de dato entero para la variable m: minutos
        
        try {        
            m = Integer.parseInt(txtMinuto.getText());
        }
        catch (NumberFormatException e){
            lblEntrada.setText("¡¡ entrada no valida, repitela de nuevo !!");
        }    
        
        
        // logica para la convertir a texto
        if (h >=1 && h<=12){
            String hora= cadenaenhora(h);
            if (m >=0 && m<60){
                lblEntrada.setText("Entrada  " + h + ":" + m);
                if (m==0){
                    lblResultado.setText(hora + " en punto");
                }
                else {
                    String min= cadenaenminutos(m);
                    lblResultado.setText(hora + " y " + min + " minutos");
                }
            }
            else lblResultado.setText("Minutos invalidos");
        }
        else lblResultado.setText("Hora invalida");
    }//GEN-LAST:event_btnGenerar1ActionPerformed
    
    /**
     * 
     * @param h : hora tipo int
     * @return cadena con la hora en letras 
     * partiendo de un entero (h) entre 1 a 12 devuelve el número en letras 
     */
    private static String cadenaenhora(int h) {
        switch (h) {
            case 1:
                return ("Una");
            case 2:
                return ("Dos");
            case 3:
                return ("Tres");
            case 4:
                return ("Cuatro");
            case 5:
                return ("Cinco");
            case 6:
                return ("Seis");
            case 7:
                return ("Siete");
            case 8:
                return ("Ocho");
            case 9:
                return ("Nueve");
            case 10:
                return ("Diez");
            case 11:
                return ("Once");
            case 12:
                return ("Doce");
        }
        return null;
    }

    /**
     * 
     * @param m : minutos, entero entre 0 y 60
     * @return cadena con los minutos en letras
     * esta funcion separa los minutos de decenas y unidades e invoca a las funciones que devuelven el numero en letras
     */
    private static String cadenaenminutos(int m) {
        // separacion en decenas y unidades
        int decena = m/10;
        int unidad = m%10;
        
        // loguica para invocación de funciones
        switch (decena) {
            case 1:
                return numerosDel10al20(m);
            case 0:
                return unidades(unidad);
            default:
                if (unidad==0)
                    return decenas(decena) + unidades(unidad);
                else
                    return decenas(decena) + " y" + unidades(unidad);
        }
    }

    /**
     * 
     * @param m: minutos
     * @return cadena con el respectivo numero entre 10 y 19 convertido a letras
     */
    private static String numerosDel10al20(int m) {
        switch (m) {
            case 10:
                return ("Diez");
            case 11:
                return ("Once");
            case 12:
                return ("Doce");
            case 13:
                return ("Trece");
            case 14:
                return ("Catorce");
            case 15:
                return ("Quice");
            case 16:
		return "Dieciseis";
            case 17:
                    return "Diecisiete";
            case 18:
                    return "Dieciocho";
            case 19:
                    return "Diecinueve";
        }
        return null;
    }

    /**
     * 
     * @param unidad: valor de las unidades entre 0 y 9
     * @return cadena correspondiente a un número entre 0 y 9
     */
    private static String unidades(int unidad) {
        switch(unidad){
	case 1:
		return " un";
	case 2:
		return " dos";
	case 3:
		return " tres";
	case 4:
		return " cuatro";
	case 5:
		return " cinco";
	case 6:
		return " seis";
	case 7:
		return " siete";
	case 8:
		return " ocho";
	case 9:
		return " nueve";
	case 0:
		return "";
        }
        return null;
    }

    /**
     * 
     * @param decena: entero, entre 2 y 5 valor de las decenas correspondiente a los minutos ingresados
     * @return cadena con el valor de la decena de los minutos en letras 
     */
    private static String decenas(int decena) {
        switch (decena){
	case 2:
		return "Veinte";
	case 3:
		return "Treinta";
	case 4:
		return "Cuarenta";
	case 5:
		return "Cincuenta";		
	default:
		return "";
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPunto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPunto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPunto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPunto2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPunto2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblEntrada;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtMinuto;
    // End of variables declaration//GEN-END:variables
}
